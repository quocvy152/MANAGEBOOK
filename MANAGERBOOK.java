/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package managerbook;

import java.sql.*;
import java.util.*;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
        
/**
 *
 * @author ASUS
 */
public class MANAGERBOOK extends javax.swing.JFrame {

    static DefaultTableModel dtm;
    static String PREFIX_PATH_IMAGE = "C:\\Users\\ASUS\\Documents\\NetBeansProjects\\MANAGERBOOK\\src\\";
    
    /**
     * Creates new form MANAGERBOOK
     */
    public MANAGERBOOK() {
        initComponents();
        getSach();
        updateCBTenTG();
        updateCBLS();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        notiTTG = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        inputTS = new javax.swing.JTextField();
        cbTTG = new javax.swing.JComboBox<>();
        cbLS = new javax.swing.JComboBox<>();
        newTG = new javax.swing.JTextField();
        newLS = new javax.swing.JTextField();
        inputHA = new javax.swing.JLabel();
        inputGT = new javax.swing.JTextField();
        inputSL = new javax.swing.JTextField();
        inputNXB = new javax.swing.JTextField();
        inputKT = new javax.swing.JTextField();
        inputST = new javax.swing.JTextField();
        inputMT = new javax.swing.JTextField();
        notiTS = new javax.swing.JLabel();
        notiTS1 = new javax.swing.JLabel();
        notiLS = new javax.swing.JLabel();
        notiHA = new javax.swing.JLabel();
        notiGT = new javax.swing.JLabel();
        notiSL = new javax.swing.JLabel();
        notiNXB = new javax.swing.JLabel();
        notiST = new javax.swing.JLabel();
        notiKT = new javax.swing.JLabel();
        notiMT = new javax.swing.JLabel();
        cbHA = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoSach = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 153));
        jLabel2.setText("Tên sách");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 153));
        jLabel3.setText("Tên tác giả");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 153));
        jLabel4.setText("Loại sách");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 153));
        jLabel5.setText("Hình ảnh");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 153));
        jLabel6.setText("Giá tiền");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 153));
        jLabel7.setText("Số lượng");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 51, 153));
        jLabel8.setText("Ngày XB");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 153));
        jLabel9.setText("Kích thước");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 153));
        jLabel10.setText("Số trang");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 51, 153));
        jLabel11.setText("Mô tả");

        cbTTG.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tên tác giả" }));
        cbTTG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTTGActionPerformed(evt);
            }
        });

        cbLS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loại sách" }));

        inputHA.setText("Hình ảnh");
        inputHA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        notiTS.setForeground(new java.awt.Color(255, 0, 0));

        notiTS1.setForeground(new java.awt.Color(255, 0, 0));

        notiLS.setForeground(new java.awt.Color(255, 0, 0));

        notiHA.setForeground(new java.awt.Color(255, 0, 0));

        notiGT.setForeground(new java.awt.Color(255, 0, 0));

        notiSL.setForeground(new java.awt.Color(255, 0, 0));

        notiNXB.setForeground(new java.awt.Color(255, 0, 0));

        notiST.setForeground(new java.awt.Color(255, 0, 0));

        notiKT.setForeground(new java.awt.Color(255, 0, 0));

        notiMT.setForeground(new java.awt.Color(255, 0, 0));

        cbHA.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "google.jpg", "AdamaTraore.jpg", "CR7.jpg", "Casemiro.jpg", "Diogo Jota.jpg", "Jonny.jpg", "Dowload.jpg", "Dybala.jpg", "leander-dendoncker.png", "logoV.jpg", "Marcelo.jpg", "Moutinho" }));

        javax.swing.GroupLayout notiTTGLayout = new javax.swing.GroupLayout(notiTTG);
        notiTTG.setLayout(notiTTGLayout);
        notiTTGLayout.setHorizontalGroup(
            notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notiTTGLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(notiTTGLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(notiTTGLayout.createSequentialGroup()
                        .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(84, 84, 84)
                        .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, notiTTGLayout.createSequentialGroup()
                                .addComponent(notiTS1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                            .addGroup(notiTTGLayout.createSequentialGroup()
                                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(notiTTGLayout.createSequentialGroup()
                                        .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(cbLS, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbTTG, 0, 161, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(newLS)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, notiTTGLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(newTG, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(inputST, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(inputKT, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(notiKT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(notiNXB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(notiTS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(inputTS, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                                            .addComponent(inputGT, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(inputSL, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(inputNXB, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, notiTTGLayout.createSequentialGroup()
                                                .addComponent(inputHA, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(notiHA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(cbHA, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                            .addComponent(notiLS, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(notiGT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(notiSL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(notiST, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(inputMT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                                            .addComponent(notiMT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(15, 15, 15))))))
        );
        notiTTGLayout.setVerticalGroup(
            notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notiTTGLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputTS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notiTS)
                .addGap(24, 24, 24)
                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbTTG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newTG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(notiTS1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbLS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newLS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(notiTTGLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel5)
                        .addGap(57, 57, 57))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, notiTTGLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(notiLS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inputHA, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(notiTTGLayout.createSequentialGroup()
                                .addComponent(cbHA, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(notiHA, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(inputGT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notiGT)
                .addGap(20, 20, 20)
                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(inputSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notiSL)
                .addGap(25, 25, 25)
                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(inputNXB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notiNXB)
                .addGap(22, 22, 22)
                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(inputKT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notiKT, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(inputST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notiST, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(notiTTGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(inputMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notiMT, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        infoSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên sách", "Tên TG", "Loại sách", "Hình ảnh", "Giá tiền", "Số lượng", "Ngày XB", "Kích thước", "Số trang", "Mô tả"
            }
        ));
        infoSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoSachMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(infoSach);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 931, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        btnThem.setBackground(new java.awt.Color(0, 204, 51));
        btnThem.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnThem.setForeground(new java.awt.Color(255, 255, 255));
        btnThem.setText("THÊM");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnXoa.setBackground(new java.awt.Color(204, 0, 0));
        btnXoa.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnXoa.setForeground(new java.awt.Color(255, 255, 255));
        btnXoa.setText("XÓA");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(0, 204, 204));
        btnSua.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSua.setForeground(new java.awt.Color(255, 255, 255));
        btnSua.setText("SỬA");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(352, 352, 352)
                .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(258, 258, 258))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(94, Short.MAX_VALUE))
        );

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setText("PHẦN MỀM QUẢN LÝ SÁCH");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(633, 633, 633))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(notiTTG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(notiTTG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getSach() {
        Connection conn = getConnection();
        
        String sqlListSach = "SELECT * FROM BOOK";
        
        Vector vt = null;
        vt = new Vector();
        
        dtm = (DefaultTableModel) infoSach.getModel();
        dtm.setNumRows(0);
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlListSach);
            ResultSet rs = ps.executeQuery();
            
            while(rs.next()) {
                vt.add(rs.getString("tenSach"));
                vt.add(rs.getString("tenTG"));
                vt.add(rs.getString("loaiSach"));
                vt.add(rs.getString("hinhAnh"));
                vt.add(rs.getString("giaTien"));
                vt.add(rs.getString("soLuong"));
                vt.add(rs.getString("ngayXB"));
                vt.add(rs.getString("kichThuoc"));
                vt.add(rs.getString("soTrang"));
                vt.add(rs.getString("moTa"));
                
                dtm.addRow(vt);
                vt = new Vector();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void updateCBTenTG() {
        Connection conn = getConnection();
        
        String sqlListTG = "SELECT * FROM TACGIA";
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlListTG);
            ResultSet rs = ps.executeQuery();
            
            cbTTG.removeAllItems();
            cbTTG.addItem("Tên tác giả");
            
            while(rs.next()) {
                cbTTG.addItem(rs.getString("tenTG"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void updateCBLS() {
        Connection conn = getConnection();
        
        String sqlListLS = "SELECT * FROM LOAISACH";
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlListLS);
            ResultSet rs = ps.executeQuery();
            
            cbLS.removeAllItems();
            cbLS.addItem("Loại sách");
            
            while(rs.next()) {
                cbLS.addItem(rs.getString("tenLS"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private boolean kiemTraLoi(String tenSach, int flag) {
        /*
            flag == 1 dùng kiểm tra lỗi cho mọi hàm
            flagg == 2 dùng kiểm tra lỗi cho hàm sửa
        */
        boolean untilError = false;
        
        if(kiemTraTS(tenSach) && flag == 1) {
            notiTS.setText("Tên sách đã tồn tại");
            untilError = true;
        } else if(inputTS.getText().equals("")) {
            notiTS.setText("Vui lòng nhập tên sách");
            untilError = true;
        } else {
            notiTS.setText("");
        }
        
        if(cbTTG.getSelectedItem().equals("Tên tác giả") && newTG.getText().equals("")) {
            notiTS1.setText("Vui lòng nhập tên tác giả");
            untilError = true;
        } else {
            notiTS1.setText("");
        }
        
        if(cbLS.getSelectedItem().equals("Loại sách") && newLS.getText().equals("")) {
            notiLS.setText("Vui lòng nhập thể loại sách");
            untilError = true;
        } else {
            notiLS.setText("");
        }
        
        if(inputGT.getText().equals("")) {
            notiGT.setText("Vui lòng nhập giá tiền");
            untilError = true;
        } else {
            notiGT.setText("");
        }
        
        if(inputSL.getText().equals("")) {
            notiSL.setText("Vui lòng nhập số lượng");
            untilError = true;
        } else {
            notiSL.setText("");
        }
        
        if(inputNXB.getText().equals("")) {
            notiNXB.setText("Vui lòng nhập số lượng");
            untilError = true;
        } else {
            notiNXB.setText("");
        }
        
        if(inputKT.getText().equals("")) {
            notiKT.setText("Vui lòng nhập kích thước");
            untilError = true;
        } else {
            notiKT.setText("");
        }
        
        if(inputST.getText().equals("")) {
            notiST.setText("Vui lòng nhập số trang");
            untilError = true;
        } else {
            notiST.setText("");
        }
        
        if(inputMT.getText().equals("")) {
            notiMT.setText("Vui lòng nhập mô tả");
            untilError = true;
        } else {
            notiMT.setText("");
        }
        
        return untilError;
    }
    
    private boolean kiemTraTS(String tenSach) {
        Connection conn = getConnection();
        
        String sqlTenSach = "SELECT * FROM BOOK WHERE tenSach=N'"+tenSach+"'";
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlTenSach);
            ResultSet rs = ps.executeQuery();
            
            if(rs.next()) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
    
    private boolean isExistTTG(String tenTG) {
        Connection conn = getConnection();
        
        String sqlTenTG = "SELECT * FROM TACGIA WHERE tenTG=N'"+tenTG+"'";
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlTenTG);
            ResultSet rs = ps.executeQuery();
            
            if(rs.next()) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }  
    
    private boolean isExistLS(String loaiSach) {
        Connection conn = getConnection();
        
        String sqlLoaiSach = "SELECT * FROM LOAISACH WHERE tenLS=N'"+loaiSach+"'";
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlLoaiSach);
            ResultSet rs = ps.executeQuery();
            
            if(rs.next()) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }  
    
    private boolean isExistMTG(String maTG) {
        Connection conn = getConnection();
        
        String sqlMaTG = "SELECT * FROM TACGIA WHERE maTG=N'"+maTG+"'";
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlMaTG);
            ResultSet rs = ps.executeQuery();
            
            if(rs.next()) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
    
    private String createRandTTG() {
        Random rd = new Random();
        
        String maTG = "";
        String maTGByWord = "TG";
        int maTGByNum = rd.nextInt(1000);
        
        maTG = maTGByWord + maTGByNum;
        while(isExistMTG(maTG)) {
            maTGByNum = rd.nextInt(1000);
            maTG = maTGByWord + maTGByNum;
        }
        return maTG;
    }
    
    private void themTG(String tenTG) {
        Connection conn = getConnection();
        String maTG = createRandTTG();
        
        String sqlThemTG = "INSERT INTO TACGIA (maTG, tenTG) VALUES ('"+maTG+"', N'"+tenTG+"')";
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlThemTG);
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void themLS(String loaiSach) {
        Connection conn = getConnection();
        
        String sqlThemLS = "INSERT INTO LOAISACH (tenLS) VALUES (N'"+loaiSach+"')";
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlThemLS);
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void themSach(String tenSach, String tenTG, String loaiSach, String hinhAnh, float giaTien, int soLuong, String ngayXB, float kichThuoc, int soTrang, String moTa) {
        Connection conn = getConnection();
        
        String sqlThem = "INSERT INTO BOOK (tenSach, tenTG, loaiSach, hinhAnh, giaTien, soLuong, ngayXB, kichThuoc, soTrang, moTa) VALUES (N'"+tenSach+"', N'"+tenTG+"', N'"+loaiSach+"', '"+hinhAnh+"', '"+giaTien+"', '"+soLuong+"', '"+ngayXB+"', '"+kichThuoc+"', '"+soTrang+"', N'"+moTa+"')";
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlThem);
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void xoaSach(String tenSach) {
        Connection conn = getConnection();
        
        String sqlXoaSach = "DELETE FROM BOOK WHERE tenSach=N'"+tenSach+"'";
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlXoaSach);
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void suaSach(String tenSach, String tenTG, String loaiSach, String hinhAnh, float giaTien, int soLuong, String ngayXB, float kichThuoc, int soTrang, String moTa) {
        Connection conn = getConnection();
        
        String sqlSuaSach = "UPDATE BOOK SET tenTG=N'"+tenTG+"', loaiSach=N'"+loaiSach+"', hinhAnh='"+hinhAnh+"', giaTien='"+giaTien+"', soLuong='"+soLuong+"', ngayXB='"+ngayXB+"', kichThuoc='"+kichThuoc+"', soTrang='"+soTrang+"', moTa=N'"+moTa+"' WHERE tenSach='"+tenSach+"'";
        
        try {
            PreparedStatement ps = conn.prepareStatement(sqlSuaSach);
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        String tenSach = inputTS.getText();
        
        String tenTGFromInput = newTG.getText();
        String tenTG = "";
        if(tenTGFromInput.equals("")) {
            tenTG = cbTTG.getSelectedItem().toString();
        } else {
            tenTG = newTG.getText();
        }
        
        String loaiSachFromInput = newLS.getText();
        String loaiSach = "";
        if(loaiSachFromInput.equals("")) {
            loaiSach = cbLS.getSelectedItem().toString();
        } else {
            loaiSach = newLS.getText();
        }
        
        String hinhAnh = cbHA.getSelectedItem().toString();
        String giaTien = inputGT.getText();
        String soLuong = inputSL.getText();
        String ngayXB = inputNXB.getText();
        String kichThuoc = inputKT.getText();
        String soTrang = inputST.getText();
        String moTa = inputMT.getText();
        
        try {
            if(!kiemTraLoi(tenSach, 1)) {
                float gtAfterParse, ktAfterParse;
                int slAfterParse, stAfterParse;
                gtAfterParse = Float.parseFloat(giaTien); ktAfterParse = Float.parseFloat(kichThuoc);
                slAfterParse = Integer.parseInt(soLuong); stAfterParse = Integer.parseInt(soTrang);
                
                if(!isExistTTG(tenTG)) {
                    themTG(tenTG);
                    updateCBTenTG();
                }
                
                if(!isExistLS(loaiSach)) {
                    themLS(loaiSach);
                    updateCBLS();
                }
                
                themSach(tenSach, tenTG, loaiSach, hinhAnh, gtAfterParse, slAfterParse, ngayXB, ktAfterParse, stAfterParse, moTa);
                JOptionPane.showMessageDialog(rootPane, "THÊM THÀNH CÔNG");
                getSach();
            } else {
                kiemTraLoi(tenSach, 1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        Connection conn = getConnection();
        String tenSach = inputTS.getText();
        
        try {
            if(!kiemTraTS(tenSach)) {
                notiTS.setText("Vui lòng kiểm tra lại tên sách");
            } else {
                int userSelect = JOptionPane.showConfirmDialog(rootPane, "BẠN CÓ CHẮC CHẮN MUỐN XÓA?");
                if(userSelect == JOptionPane.OK_OPTION) {
                    xoaSach(tenSach);
                    JOptionPane.showMessageDialog(rootPane, "XÓA THÀNH CÔNG");
                    getSach();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "BẠN ĐÃ HỦY VIỆC XÓA");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        String tenSach = inputTS.getText();
        String tenTG = cbTTG.getSelectedItem().toString();
        String loaiSach = cbLS.getSelectedItem().toString();
        String hinhAnh = cbHA.getSelectedItem().toString();
        String giaTien = inputGT.getText();
        String soLuong = inputSL.getText();
        String ngayXB = inputNXB.getText();
        String kichThuoc = inputKT.getText();
        String soTrang = inputST.getText();
        String moTa = inputMT.getText();
        
        try {
            if(!kiemTraLoi(tenSach, 2)) {
                if(!kiemTraTS(tenSach)) {
                    notiTS.setText("Tên sách không tồn tại");
                } else {
                    float gtAfterParse, ktAfterParse;
                    int slAfterParse, stAfterParse;
                    gtAfterParse = Float.parseFloat(giaTien); ktAfterParse = Float.parseFloat(kichThuoc);
                    slAfterParse = Integer.parseInt(soLuong); stAfterParse = Integer.parseInt(soTrang);
                    suaSach(tenSach, tenTG, loaiSach, hinhAnh, gtAfterParse, slAfterParse, ngayXB, ktAfterParse, stAfterParse, moTa);
                    JOptionPane.showMessageDialog(rootPane, "SỬA THÔNG TIN SÁCH THÀNH CÔNG");
                    getSach();  
                }
            } else {
                kiemTraLoi(tenSach, 2);
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void infoSachMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoSachMouseClicked
        int row = infoSach.getSelectedRow();
        
        dtm = (DefaultTableModel) infoSach.getModel();
        
        inputTS.setText(dtm.getValueAt(row, 0).toString());
        cbTTG.setSelectedItem(dtm.getValueAt(row, 1).toString());
        cbLS.setSelectedItem(dtm.getValueAt(row, 2).toString());
        
        String pathImgBook = MANAGERBOOK.PREFIX_PATH_IMAGE + dtm.getValueAt(row, 3).toString();
        Icon icon = new ImageIcon(pathImgBook);
        inputHA.setIcon(icon); cbHA.setSelectedItem(dtm.getValueAt(row, 3).toString());
        
        inputGT.setText(dtm.getValueAt(row, 4).toString());
        inputSL.setText(dtm.getValueAt(row, 5).toString());
        inputKT.setText(dtm.getValueAt(row, 7).toString());        
        inputST.setText(dtm.getValueAt(row, 8).toString());
        
        inputNXB.setText(dtm.getValueAt(row, 6).toString());
        inputMT.setText(dtm.getValueAt(row, 9).toString());
    }//GEN-LAST:event_infoSachMouseClicked

    private void cbTTGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTTGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTTGActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MANAGERBOOK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MANAGERBOOK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MANAGERBOOK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MANAGERBOOK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MANAGERBOOK().setVisible(true);
            }
        });
    }
    
    private Connection getConnection() {
        Connection conn = null;
        
        String PATH = "jdbc:sqlserver://;databaseName=MANAGERBOOK";
        String user = "sa";
        String pass = "1";
        
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = DriverManager.getConnection(PATH, user, pass);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return conn;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cbHA;
    private javax.swing.JComboBox<String> cbLS;
    private javax.swing.JComboBox<String> cbTTG;
    private javax.swing.JTable infoSach;
    private javax.swing.JTextField inputGT;
    private javax.swing.JLabel inputHA;
    private javax.swing.JTextField inputKT;
    private javax.swing.JTextField inputMT;
    private javax.swing.JTextField inputNXB;
    private javax.swing.JTextField inputSL;
    private javax.swing.JTextField inputST;
    private javax.swing.JTextField inputTS;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField newLS;
    private javax.swing.JTextField newTG;
    private javax.swing.JLabel notiGT;
    private javax.swing.JLabel notiHA;
    private javax.swing.JLabel notiKT;
    private javax.swing.JLabel notiLS;
    private javax.swing.JLabel notiMT;
    private javax.swing.JLabel notiNXB;
    private javax.swing.JLabel notiSL;
    private javax.swing.JLabel notiST;
    private javax.swing.JLabel notiTS;
    private javax.swing.JLabel notiTS1;
    private javax.swing.JPanel notiTTG;
    // End of variables declaration//GEN-END:variables
}
